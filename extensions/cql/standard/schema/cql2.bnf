#
# MODULE:  cql2.bnf
# PURPOSE: A BNF grammar for the Common Query Language (CQL2).
# HISTORY:
# DATE         EMAIL                                  DESCRIPTION
# 13-SEP-2019  pvretano[at]cubewerx.com               Initial creation
# 28-OCT-2019  pvretano[at]cubewerx.com               Initial checkin into github
# 22-NOV-2020  pvretano[at]cubewerx.com               Updates based on issues
# 22-NOV-2020  portele[at]interactive-instruments.de  Document restructuring
# 21-DEC-2020  pvretano[at]cubewerx.com               Updates to resolve issues

#=============================================================================#
# A CQL2 filter is a logically connected expression of one or more predicates.
# Predicates include scalar or comparison predicates, spatial predicates or
# temporal predicates.
#=============================================================================#
booleanValueExpression = andExpression
                       | orExpression
                       | notExpression
                       | comparisonPredicate
                       | spatialPredicate
                       | temporalPredicate
                       | arrayPredicate
                       | subExpression;

andExpression = booleanValueExpression "AND" booleanValueExpression;

orExpression = booleanValueExpression "OR" booleanValueExpression;

notExpression = "NOT" booleanValueExpression;

subExpression = leftParen booleanValueExpression rightParen;

#=============================================================================#
# A comparison predicate evaluates if two scalar expression statisfy the
# specified comparison operator.  The comparion operators includes an operator
# to evaluate pattern matching expressions (LIKE), a range evaluation operator
# and an operator to test if a scalar expression is NULL or not.
#=============================================================================#
comparisonPredicate = binaryComparisonPredicate
                    | isLikePredicate
                    | isBetweenPredicate
                    | isInListPredicate
                    | isNullPredicate;

# Binary comparison predicate
#
binaryComparisonPredicate = scalarExpression
                            comparisonOperator
                            scalarExpression;

scalarExpression = characterLiteral
                 | numericLiteral
                 | booleanLiteral
                 | instantLiteral
                 | propertyName
                 | function
                 | arithmeticExpression;

comparisonOperator = eq | neq | lt | gt | lteq | gteq;

neq = lt gt;

gteq = gt eq;

lteq = lt eq;

# LIKE predicate
#
isLikePredicate =  scalarExpression "LIKE" patternExpression;

patternExpression = characterLiteral;

# BETWEEN predicate
#
isBetweenPredicate = numericExpression ["NOT"] "BETWEEN"
                     numericExpression "AND" numericExpression;

numericExpression = numericLiteral
                  | propertyName
                  | function
                  | arithmeticExpression;

# IN LIST predicate
#
isInListPredicate = inListOperand ["NOT"] "IN" leftParen inList rightParen;

inList = inListOperand [ {comma inListOperand} ];

inListOperand = scalarExpression
              | intervalLiteral
              | spatialLiteral;

# IS NULL predicate
#
isNullPredicate = scalarExpression "IS" ["NOT"] "NULL";

#=============================================================================#
# A spatial predicate evaluates if two spatial expressions satisfy the
# specified spatial operator.
#=============================================================================#
spatialPredicate =  spatialOperator
                    leftParen geomExpression comma geomExpression rightParen;

# NOTE: The buffer operators (DWITHIN and BEYOND) are not included because
#       these are outside the scope of a "simple" core for CQL2.  These
#       can be added as extensions.
#
spatialOperator = "S_INTERSECTS"
                | "S_EQUALS"
                | "S_DISJOINT"
                | "S_TOUCHES"
                | "S_WITHIN"
                | "S_OVERLAPS"
                | "S_CROSSES"
                | "S_CONTAINS";

# A geometric expression is a property name of a geometry-valued property,
# a geometric literal (expressed as WKT) or a function that returns a
# geometric value.
#
geomExpression = spatialLiteral
               | propertyName
               | function;

#=============================================================================#
# A temporal predicate evaluates if two temporal expressions satisfy the
# specified temporal operator.
#=============================================================================#
temporalPredicate = temporalOperator 
                    leftParen temporalExpression comma temporalExpression rightParen;

temporalExpression = temporalLiteral
                   | propertyName
                   | function;

temporalOperator = "T_AFTER"
                 | "T_BEFORE"
                 | "T_CONTAINS"
                 | "T_DISJOINT"
                 | "T_DURING"
                 | "T_EQUALS"
                 | "T_FINISHEDBY"
                 | "T_FINISHES"
                 | "T_INTERSECTS"
                 | "T_MEETS"
                 | "T_METBY"
                 | "T_OVERLAPPEDBY"
                 | "T_OVERLAPS"
                 | "T_STARTEDBY"
                 | "T_STARTS";

#=============================================================================#
# An array predicate evaluates if two array expressions statisfy the
# specified comparison operator.  The comparion operators include equality,
# not equal, less than, greater than, less than or equal, greater than or equal,
# superset, subset and overlap operators.
#=============================================================================#
arrayPredicate = arrayOperator
                 leftParen arrayExpression comma arrayExpression rightParen;

# An array expression is a bracket-delimited, comma-separated list of array
# elements.  An array element is either a character literal, a numeric literal,
# a geometric literal, a temporal literal, a property name, a function, an
# arithmetic expression or an array.
#
arrayExpression = propertyName | function | arrayLiteral;

arrayLiteral = leftBracket rightBracket
             | leftBracket arrayElement [ { comma arrayElement } ] rightBracket;

arrayElement = characterLiteral
             | numericLiteral
             | booleanLiteral
             | spatialLiteral
             | temporalLiteral
             | propertyName
             | function
             | arithmeticExpression
             | arrayLiteral;

arrayOperator = "A_EQUALS"
              | "A_CONTAINS"
              | "A_CONTAINEDBY"
              | "A_OVERLAPS";

#=============================================================================#
# An arithemtic expression is an expression composed of an arithmetic
# operand (a property name, a number or a function that returns a number),
# an arithmetic operators (+,-,*,/) and another arithmetic operand.
#=============================================================================#
arithmeticExpression = arithmeticOperand arithmeticOperator arithmeticOperand
                     | leftParen arithmeticExpression rightParen;

arithmeticOperator = plusSign | minusSign | asterisk | solidus;

arithmeticOperand = numericLiteral
                  | propertyName
                  | function;

#=============================================================================#
# Definition of a PROPERTYNAME
#=============================================================================#
propertyName = identifier | doubleQuote identifier doubleQuote
             | "UPPER" leftParen propertyName rightParen
             | "LOWER" leftParen propertyName rightParen;

identifier = identifierStart [ {colon | period | identifierPart} ];

identifierStart = alpha;

identifierPart = alpha | digit | dollar | underscore;

#=============================================================================#
# Definition of a FUNCTION
# The functions offered by an implementation are provided at `/functions`
#=============================================================================#
function = identifier leftParen {argumentList} rightParen
         | "UPPER" leftParen function rightParen
         | "LOWER" leftParen function rightParen;

argumentList = argument [ { comma argument } ];

argument = characterLiteral
         | numericLiteral
         | booleanLiteral
         | spatialLiteral
         | temporalLiteral
         | propertyName
         | function
         | arithmeticExpression
         | arrayExpression;

#=============================================================================#
# Definition of CHARACTER literals
#=============================================================================#
characterLiteral = characterStringLiteral
                 | "UPPER" leftParent characterLiteral rightParen
                 | "LOWER" leftParent characterLiteral rightParen
                 | bitStringLiteral
                 | hexStringLiteral;

characterStringLiteral = quote [ {character} ] quote;

character = alpha | digit | extendedDigit | ideographic |
            combiningChar | extender;

# alpha, digit, extendedDigit, ideographic, combiningChar and extender
# productions copied from https://www.w3.org/TR/REC-xml/#CharClasses
#
alpha = "\x0041".."\x005A" | "\x0061".."\x007A" | "\x00C0".."\x00D6" |
        "\x00D8".."\x00F6" | "\x00F8".."\x00FF" | "\x0100".."\x0131" |
        "\x0134".."\x013E" | "\x0141".."\x0148" | "\x014A".."\x017E" |
        "\x0180".."\x01C3" | "\x01CD".."\x01F0" | "\x01F4".."\x01F5" |
        "\x01FA".."\x0217" | "\x0250".."\x02A8" | "\x02BB".."\x02C1" |
        "\x0386"           | "\x0388".."\x038A" | "\x038C"           |
        "\x038E".."\x03A1" | "\x03A3".."\x03CE" | "\x03D0".."\x03D6" |
        "\x03DA"           | "\x03DC"           | "\x03DE"           |
        "\x03E0"           | "\x03E2".."\x03F3" | "\x0401".."\x040C" |
        "\x040E".."\x044F" | "\x0451".."\x045C" | "\x045E".."\x0481" |
        "\x0490".."\x04C4" | "\x04C7".."\x04C8" | "\x04CB".."\x04CC" |
        "\x04D0".."\x04EB" | "\x04EE".."\x04F5" | "\x04F8".."\x04F9" |
        "\x0531".."\x0556" | "\x0559"           | "\x0561".."\x0586" |
        "\x05D0".."\x05EA" | "\x05F0".."\x05F2" | "\x0621".."\x063A" |
        "\x0641".."\x064A" | "\x0671".."\x06B7" | "\x06BA".."\x06BE" |
        "\x06C0".."\x06CE" | "\x06D0".."\x06D3" | "\x06D5"           |
        "\x06E5".."\x06E6" | "\x0905".."\x0939" | "\x093D"           |
        "\x0958".."\x0961" | "\x0985".."\x098C" | "\x098F".."\x0990" |
        "\x0993".."\x09A8" | "\x09AA".."\x09B0" | "\x09B2"           |
        "\x09B6".."\x09B9" | "\x09DC".."\x09DD" | "\x09DF".."\x09E1" |
        "\x09F0".."\x09F1" | "\x0A05".."\x0A0A" | "\x0A0F".."\x0A10" |
        "\x0A13".."\x0A28" | "\x0A2A".."\x0A30" | "\x0A32".."\x0A33" |
        "\x0A35".."\x0A36" | "\x0A38".."\x0A39" | "\x0A59".."\x0A5C" |
        "\x0A5E"           | "\x0A72".."\x0A74" | "\x0A85".."\x0A8B" |
        "\x0A8D"           | "\x0A8F".."\x0A91" | "\x0A93".."\x0AA8" |
        "\x0AAA".."\x0AB0" | "\x0AB2".."\x0AB3" | "\x0AB5".."\x0AB9" |
        "\x0ABD"           | "\x0AE0"           | "\x0B05".."\x0B0C" |
        "\x0B0F".."\x0B10" | "\x0B13".."\x0B28" | "\x0B2A".."\x0B30" |
        "\x0B32".."\x0B33" | "\x0B36".."\x0B39" | "\x0B3D"           |
        "\x0B5C".."\x0B5D" | "\x0B5F".."\x0B61" | "\x0B85".."\x0B8A" |
        "\x0B8E".."\x0B90" | "\x0B92".."\x0B95" | "\x0B99".."\x0B9A" |
        "\x0B9C"           | "\x0B9E".."\x0B9F" | "\x0BA3".."\x0BA4" |
        "\x0BA8".."\x0BAA" | "\x0BAE".."\x0BB5" | "\x0BB7".."\x0BB9" |
        "\x0C05".."\x0C0C" | "\x0C0E".."\x0C10" | "\x0C12".."\x0C28" |
        "\x0C2A".."\x0C33" | "\x0C35".."\x0C39" | "\x0C60".."\x0C61" |
        "\x0C85".."\x0C8C" | "\x0C8E".."\x0C90" | "\x0C92".."\x0CA8" |
        "\x0CAA".."\x0CB3" | "\x0CB5".."\x0CB9" | "\x0CDE"           |
        "\x0CE0".."\x0CE1" | "\x0D05".."\x0D0C" | "\x0D0E".."\x0D10" |
        "\x0D12".."\x0D28" | "\x0D2A".."\x0D39" | "\x0D60".."\x0D61" |
        "\x0E01".."\x0E2E" | "\x0E30"           | "\x0E32".."\x0E33" |
        "\x0E40".."\x0E45" | "\x0E81".."\x0E82" | "\x0E84"           |
        "\x0E87".."\x0E88" | "\x0E8A"           | "\x0E8D"           |
        "\x0E94".."\x0E97" | "\x0E99".."\x0E9F" | "\x0EA1".."\x0EA3" |
        "\x0EA5"           | "\x0EA7"           | "\x0EAA".."\x0EAB" |
        "\x0EAD".."\x0EAE" | "\x0EB0"           | "\x0EB2".."\x0EB3" |
        "\x0EBD"           | "\x0EC0".."\x0EC4" | "\x0F40".."\x0F47" |
        "\x0F49".."\x0F69" | "\x10A0".."\x10C5" | "\x10D0".."\x10F6" |
        "\x1100"           | "\x1102".."\x1103" | "\x1105".."\x1107" |
        "\x1109"           | "\x110B".."\x110C" | "\x110E".."\x1112" |
        "\x113C"           | "\x113E"           | "\x1140"           |
        "\x114C"           | "\x114E"           | "\x1150"           |
        "\x1154".."\x1155" | "\x1159"           | "\x115F".."\x1161" |
        "\x1163"           | "\x1165"           | "\x1167"           |
        "\x1169"           | "\x116D".."\x116E" | "\x1172".."\x1173" |
        "\x1175"           | "\x119E"           | "\x11A8"           |
        "\x11AB"           | "\x11AE".."\x11AF" | "\x11B7".."\x11B8" |
        "\x11BA"           | "\x11BC".."\x11C2" | "\x11EB"           |
        "\x11F0"           | "\x11F9"           | "\x1E00".."\x1E9B" |
        "\x1EA0".."\x1EF9" | "\x1F00".."\x1F15" | "\x1F18".."\x1F1D" |
        "\x1F20".."\x1F45" | "\x1F48".."\x1F4D" | "\x1F50".."\x1F57" |
        "\x1F59"           | "\x1F5B"           | "\x1F5D"           |
        "\x1F5F".."\x1F7D" | "\x1F80".."\x1FB4" | "\x1FB6".."\x1FBC" |
        "\x1FBE"           | "\x1FC2".."\x1FC4" | "\x1FC6".."\x1FCC" |
        "\x1FD0".."\x1FD3" | "\x1FD6".."\x1FDB" | "\x1FE0".."\x1FEC" |
        "\x1FF2".."\x1FF4" | "\x1FF6".."\x1FFC" | "\x2126"           |
        "\x212A".."\x212B" | "\x212E"           | "\x2180".."\x2182" |
        "\x3041".."\x3094" | "\x30A1".."\x30FA" | "\x3105".."\x312C" |
        "\xAC00".."\xD7A3";

digit = "\x0030".."\x0039";

ideographic = "\x4E00".."\x9FA5" | "\x3007" | "\x3021".."\x3029";

combiningChar = "\x0300".."\x0345" | "\x0360".."\x0361" | "\x0483".."\x0486" |
                "\x0591".."\x05A1" | "\x05A3".."\x05B9" | "\x05BB".."\x05BD" |
                "\x05BF"           | "\x05C1".."\x05C2" | "\x05C4"           |
                "\x064B".."\x0652" | "\x0670"           | "\x06D6".."\x06DC" |
                "\x06DD".."\x06DF" | "\x06E0".."\x06E4" | "\x06E7".."\x06E8" |
                "\x06EA".."\x06ED" | "\x0901".."\x0903" | "\x093C"           |
                "\x093E".."\x094C" | "\x094D"           | "\x0951".."\x0954" |
                "\x0962".."\x0963" | "\x0981".."\x0983" | "\x09BC"           |
                "\x09BE"           | "\x09BF"           | "\x09C0".."\x09C4" |
                "\x09C7".."\x09C8" | "\x09CB".."\x09CD" | "\x09D7"           |
                "\x09E2".."\x09E3" | "\x0A02"           | "\x0A3C"           |
                "\x0A3E"           | "\x0A3F"           | "\x0A40".."\x0A42" |
                "\x0A47".."\x0A48" | "\x0A4B".."\x0A4D" | "\x0A70".."\x0A71" |
                "\x0A81".."\x0A83" | "\x0ABC"           | "\x0ABE".."\x0AC5" |
                "\x0AC7".."\x0AC9" | "\x0ACB".."\x0ACD" | "\x0B01".."\x0B03" |
                "\x0B3C"           | "\x0B3E".."\x0B43" | "\x0B47".."\x0B48" |
                "\x0B4B".."\x0B4D" | "\x0B56".."\x0B57" | "\x0B82".."\x0B83" |
                "\x0BBE".."\x0BC2" | "\x0BC6".."\x0BC8" | "\x0BCA".."\x0BCD" |
                "\x0BD7"           | "\x0C01".."\x0C03" | "\x0C3E".."\x0C44" |
                "\x0C46".."\x0C48" | "\x0C4A".."\x0C4D" | "\x0C55".."\x0C56" |
                "\x0C82".."\x0C83" | "\x0CBE".."\x0CC4" | "\x0CC6".."\x0CC8" |
                "\x0CCA".."\x0CCD" | "\x0CD5".."\x0CD6" | "\x0D02".."\x0D03" |
                "\x0D3E".."\x0D43" | "\x0D46".."\x0D48" | "\x0D4A".."\x0D4D" |
                "\x0D57"           | "\x0E31"           | "\x0E34".."\x0E3A" |
                "\x0E47".."\x0E4E" | "\x0EB1"           | "\x0EB4".."\x0EB9" |
                "\x0EBB".."\x0EBC" | "\x0EC8".."\x0ECD" | "\x0F18".."\x0F19" |
                "\x0F35"           | "\x0F37"           | "\x0F39"           |
                "\x0F3E"           | "\x0F3F"           | "\x0F71".."\x0F84" |
                "\x0F86".."\x0F8B" | "\x0F90".."\x0F95" | "\x0F97"           |
                "\x0F99".."\x0FAD" | "\x0FB1".."\x0FB7" | "\x0FB9"           |
                "\x20D0".."\x20DC" | "\x20E1"           | "\x302A".."\x302F" |
                "\x3099"           | "\x309A";

extendedDigit = "\x0660".."\x0669" | "\x06F0".."\x06F9" | "\x0966".."\x096F" |
                "\x09E6".."\x09EF" | "\x0A66".."\x0A6F" | "\x0AE6".."\x0AEF" |
                "\x0B66".."\x0B6F" | "\x0BE7".."\x0BEF" | "\x0C66".."\x0C6F" |
                "\x0CE6".."\x0CEF" | "\x0D66".."\x0D6F" | "\x0E50".."\x0E59" |
                "\x0ED0".."\x0ED9" | "\x0F20".."\x0F29";

extender =      "\x00B7"           | "\x02D0"           | "\x02D1"           |
                "\x0387"           | "\x0640"           | "\x0E46"           |
                "\x0EC6"           | "\x3005"           | "\x3031".."\x3035" |
                "\x309D".."\x309E" | "\x30FC".."\x30FE";

dollar = "$";

underscore = "_";

doubleQuote = "\"";

quote = "'";

leftBracket = "[";

rightBracket = "]";

leftParen = "(";

rightParen = ")";

asterisk = "*";

plusSign = "+";

comma = ",";

minusSign = "-";

period = ".";

dotdot = "..";

solidus = "/";

colon = ":";

lt = "<";

eq = "=";

gt = ">";

bit = "0" | "1";

hexit = digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f";

#=============================================================================#
# Definition of NUMERIC literals
#=============================================================================#
numericLiteral = unsignedNumericLiteral | signedNumericLiteral;

unsignedNumericLiteral = exactNumericLiteral | approximateNumericLiteral;

signedNumericLiteral = [sign] exactNumericLiteral | approximateNumericLiteral;

exactNumericLiteral = unsignedInteger [ period [ unsignedInteger ] ]
                      | period unsignedInteger;

approximateNumericLiteral = mantissa "E" exponent;

mantissa = exactNumericLiteral;

exponent = signedInteger;

signedInteger = [ sign ] unsignedInteger;

unsignedInteger = {digit};

sign = plusSign | minusSign;

#=============================================================================#
# Boolean literal
#=============================================================================#
#
booleanLiteral = "TRUE" | "FALSE";

#=============================================================================#
# Definition of GEOMETRIC literals
#
# NOTE: This is basically BNF that define WKT encoding. It would be nice
#       to instead reference some normative BNF for WKT.
#=============================================================================#
spatialLiteral = pointTaggedText
               | linestringTaggedText
               | polygonTaggedText
               | multipointTaggedText
               | multilinestringTaggedText
               | multipolygonTaggedText
               | geometryCollectionTaggedText
               | envelopeTaggedText;

pointTaggedText = "POINT" pointText;

linestringTaggedText = "LINESTRING" lineStringText;

polygonTaggedText = "POLYGON" polygonText;

multipointTaggedText = "MULTIPOINT" multiPointText;

multilinestringTaggedText = "MULTILINESTRING" multiLineStringText;

multipolygonTaggedText = "MULTIPOLYGON" multiPolygonText;

geometryCollectionTaggedText = "GEOMETRYCOLLECTION" geometryCollectionText;

pointText = leftParen point rightParen;

point = xCoord yCoord [zCoord];

xCoord = signedNumericLiteral;

yCoord = signedNumericLiteral;

zCoord = signedNumericLiteral;

lineStringText = leftParen point {comma point} rightParen;

polygonText =  leftParen lineStringText {comma lineStringText} rightParen;

multiPointText = leftParen pointText {comma pointText} rightParen;

multiLineStringText = leftParen lineStringText {comma lineStringText} rightParen;

multiPolygonText = leftParen polygonText {comma polygonText} rightParen;

geometryCollectionText = leftParen
                         spatialLiteral {comma spatialLiteral} rightParen;

envelopeTaggedText = "ENVELOPE" envelopeText;

envelopeText = leftParen westBoundLon comma southBoundLat comma [minElev comma] eastBoundLon comma northBoundLat [comma maxElev] rightParen;

westBoundLon = signedNumericLiteral;

eastBoundLon = signedNumericLiteral;

northBoundLat = signedNumericLiteral;

southBoundLat = signedNumericLiteral;

minElev = signedNumericLiteral;

maxElev = signedNumericLiteral;

temporalLiteral = instantLiteral | intervalLiteral;

instantLiteral = dateInstant | timestampInstant;

dateInstant = "DATE" 
              leftParen dateInstantString rightParen;

dateInstantString = quote fullDate quote;

timestampInstant = "TIMESTAMP" 
                   leftParen timestampInstantString rightParen;

timestampInstantString = quote fullDate "T" utcTime quote;

instantLiteral = fullDate | fullDate "T" utcTime;

intervalLiteral = "INTERVAL" 
                  leftParen instantParameter comma instantParameter rightParen;

instantParameter = instantLiteral
                 | dateInstantString
                 | timestampInstantString
                 | quote dotdot quote
                 | propertyName
                 | function;

fullDate   = dateYear "-" dateMonth "-" dateDay;

dateYear   = digit digit digit digit;

dateMonth  = digit digit;

dateDay    = digit digit;

utcTime  = timeHour ":" timeMinute ":" timeSecond "Z";

timeHour   = digit digit;

timeMinute = digit digit;

timeSecond = digit digit [period digit {digit}];
